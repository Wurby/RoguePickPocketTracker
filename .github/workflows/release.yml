name: Package and Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git history
        
    - name: Create Release Package
      id: package
      run: |
        # Get version from tag or use commit hash
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git rev-parse --short HEAD)
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Create package directory
        PACKAGE_NAME="RoguePickPocketTracker-$VERSION"
        mkdir -p "$PACKAGE_NAME"
        
        # Copy addon files with new folder structure
        cp *.toc "$PACKAGE_NAME/"
        cp -r Core/ "$PACKAGE_NAME/"
        cp -r Toasts/ "$PACKAGE_NAME/"
        cp -r UI/ "$PACKAGE_NAME/"
        cp -r Options/ "$PACKAGE_NAME/"
        
        # Replace version token in TOC file
        sed -i "s/@project-version@/$VERSION/g" "$PACKAGE_NAME/RoguePickPocketTracker.toc"
        
        # Create zip file
        zip -r "$PACKAGE_NAME.zip" "$PACKAGE_NAME/"
        
        echo "PACKAGE_FILE=$PACKAGE_NAME.zip" >> $GITHUB_OUTPUT
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        
        # Determine if this is a prerelease
        if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]]; then
          echo "PRERELEASE=true" >> $GITHUB_OUTPUT
        else
          echo "PRERELEASE=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Create release using GitHub CLI
        if [[ "${{ steps.package.outputs.PRERELEASE }}" == "true" ]]; then
          gh release create "${{ steps.package.outputs.VERSION }}" \
            --title "Release ${{ steps.package.outputs.VERSION }}" \
            --notes "Automated release for version ${{ steps.package.outputs.VERSION }}" \
            --prerelease \
            "${{ steps.package.outputs.PACKAGE_FILE }}"
        else
          gh release create "${{ steps.package.outputs.VERSION }}" \
            --title "Release ${{ steps.package.outputs.VERSION }}" \
            --notes "Automated release for version ${{ steps.package.outputs.VERSION }}" \
            "${{ steps.package.outputs.PACKAGE_FILE }}"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.PACKAGE_NAME }}
        path: ${{ steps.package.outputs.PACKAGE_FILE }}
